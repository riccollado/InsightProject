#!wing
#!version=7.0
##################################################################
# Wing project file : User-specific branch                       #
##################################################################
[user attributes]
codewarnings.hide-directive-list = [('warning.1.undefined-attribute',
                                     None,
                                     '*',
                                     '.params',
                                     (loc('../../../AppData/Local/Wing Pro 7/pi-cache/3.6/c/Users/Ricardo/Anaconda3/envs/insight-prj/Lib/site-packages/gurobipy/gurobipy.pi'),
                                      '',
                                      'Model'))]
debug.breakpoints = {loc('KG.py'): {224L: (0,
        None,
        0,
        0)},
                     loc('SBB.py'): {369L: (0,
        None,
        0,
        0)}}
debug.err-values = {loc('optimize.py'): {'stack[0:3].locals.mu_n': (-2,
        None,
        None,
        u'error',
        None,
        1,
        None,
        1,
        u'<error handling value>',
        u'Runtime failure details:\nException: <class \'TypeError\'>\nValue = \'NoneType\' object is not iterable\nTraceback (innermost last):\n  File "C:\\Users\\Ricardo\\AppData\\Roaming\\Wing Pro 7\\updates\\7.2.2.11\\bin\\dbg\\src\\debug\\tserver\\dbgutils.py", line 3267, in _AddNameSpaceEntries\n\n  File "C:\\Users\\Ricardo\\AppData\\Roaming\\Wing Pro 7\\updates\\7.2.2.11\\bin\\dbg\\src\\debug\\tserver\\dbgutils.py", line 3127, in _BuildValueWrapper\n\n  File "C:\\Users\\Ricardo\\AppData\\Roaming\\Wing Pro 7\\updates\\7.2.2.11\\bin\\dbg\\src\\debug\\tserver\\dbgutils.py", line 175, in _GetDisplayInfo\n',
        None,
        0,
        None)}}
debug.show-args-dialog = {loc('Test/KG-test.py'): False,
                          loc('optimize.py'): False}
debug.var-col-widths = [0.2934131736526946,
                        0.7065868263473054]
edit.bookmark-categories = [(u'Buggy Code',
                             'bug'),
                            (u'Needs Documentation',
                             'doc'),
                            (u'Needs Implementation',
                             'unimpl'),
                            (u'Needs Unit Test',
                             'test'),
                            (u'Other',
                             ''),
                            (u'KG-Additions',
                             'user-xaqw261n')]
edit.bookmarks = {'KG_Alg': (loc('KG.py'),
                             {'attrib-starts': [('KG_Alg|0|',
        123)],
                              'category': 'doc',
                              'code-line': '   Parameters\r\n',
                              'first-line': 72L,
                              'notes': u'',
                              'sel-line': 126L}),
                  'KG_iteration': (loc('KG.py'),
                                   {'attrib-starts': [('KG_iteration|0|',
        180)],
                                    'category': 'doc',
                                    'code-line': '   Parameters\r\n',
                                    'first-line': 120L,
                                    'notes': u'',
                                    'sel-line': 183L}),
                  'KG_multi': (loc('KG.py'),
                               {'attrib-starts': [('KG_multi|0|',
        230)],
                                'category': 'doc',
                                'code-line': '   Parameters\r\n',
                                'first-line': 174L,
                                'notes': u'',
                                'sel-line': 233L}),
                  'KG_multi[1]': (loc('KG.py'),
                                  {'attrib-starts': [('KG_multi|0|',
        230)],
                                   'category': 'test',
                                   'code-line': '   if M >= 1000:\r\n',
                                   'first-line': 215L,
                                   'notes': u'Need to select a good value here',
                                   'sel-line': 246L}),
                  'assign_scenarios': (loc('SBB.py'),
                                       {'attrib-starts': [('assign_scenarios'\
        '|0|',
        612)],
        'category': 'doc',
        'code-line': '   ...\r\n',
        'first-line': 553L,
        'notes': u'',
        'sel-line': 655L}),
                  'assign_scenarios_for_pareto': (loc('SBB.py'),
        {'attrib-starts': [('assign_scenarios_for_pareto|0|',
                            653)],
         'category': 'doc',
         'code-line': '   ...\r\n',
         'first-line': 654L,
         'notes': u'',
         'sel-line': 701L}),
                  'assign_scenarios_for_pareto[1]': (loc('SBB.py'),
        {'attrib-starts': [('assign_scenarios_for_pareto|0|',
                            653)],
         'category': '',
         'code-line': '      assigned_scenarios = np.random.choice(elements,'\
                      ' scenarios_length, p=probabilities)\r\n',
         'first-line': 573L,
         'notes': '',
         'sel-line': 720L}),
                  'bootstrap_KG': (loc('SBB.py'),
                                   {'attrib-starts': [('bootstrap_KG|0|',
        579)],
                                    'category': 'user-xaqw261n',
                                    'code-line': 'def bootstrap_KG(subproble'\
        'm, attributes_dict, sample_solutions):\r\n',
                                    'first-line': 575L,
                                    'notes': u'',
                                    'sel-line': 578L}),
                  'branch_bound_algorithm': (loc('SBB.py'),
        {'attrib-starts': [('branch_bound_algorithm|0|',
                            81)],
         'category': 'user-ltpogysy',
         'code-line': "   subproblem['Z_E'] = np.inf\r\n",
         'first-line': 82L,
         'notes': u'We can and should remove the Z_E and Z_std\nvariables. These two do excatly the same as\nE and STD (even in Bootstrap mode)',
         'sel-line': 122L}),
                  'branch_bound_algorithm[1]': (loc('SBB.py'),
        {'attrib-starts': [('branch_bound_algorithm|0|',
                            81)],
         'category': 'user-xaqw261n',
         'code-line': "   subproblem['KG_E'] = np.inf\r\n",
         'first-line': 78L,
         'notes': u'',
         'sel-line': 124L}),
                  'branch_bound_algorithm[2]': (loc('SBB.py'),
        {'attrib-starts': [('branch_bound_algorithm|0|',
                            81)],
         'category': 'user-xaqw261n',
         'code-line': '      if partitioned_flag:\r\n',
         'first-line': 111L,
         'notes': u'',
         'sel-line': 171L}),
                  'branch_bound_algorithm[7]': (loc('SBB.py'),
        {'attrib-starts': [('branch_bound_algorithm|0|',
                            81)],
         'category': 'doc',
         'code-line': '   ...\r\n',
         'first-line': 41L,
         'notes': u'',
         'sel-line': 85L}),
                  'estimate_bounds': (loc('SBB.py'),
                                      {'attrib-starts': [('estimate_bounds|0'\
        '|',
        416)],
                                       'category': 'doc',
                                       'code-line': '   ...\r\n',
                                       'first-line': 365L,
                                       'notes': u'',
                                       'sel-line': 419L}),
                  'estimate_bounds[1]': (loc('SBB.py'),
        {'attrib-starts': [('estimate_bounds|0|',
                            415)],
         'category': 'user-xaqw261n',
         'code-line': '   #  Update the KG sample statistics\r\n',
         'first-line': 340L,
         'notes': u'',
         'sel-line': 455L}),
                  'fill_ker_row_col': (loc('SBB.py'),
                                       {'attrib-starts': [('fill_ker_row_col'\
        '|0|',
        762)],
        'category': 'doc',
        'code-line': '   """FIlls the last two rows and columns of COV with '\
                     'the exponential kernel values of\r\n',
        'first-line': 804L,
        'notes': u'',
        'sel-line': 820L}),
                  'generate_betas[2]': (loc('generator_distribution.py'),
        {'attrib-starts': [('generate_betas|0|',
                            6)],
         'category': 'test',
         'code-line': 'def generate_betas(project_network, activities, out_l'\
                      'ocation):\r\n',
         'first-line': 0L,
         'notes': u'We need to check the values for the betas. At the moment we are getting a huge\ndiscrepance between the uncrashed project with most likely time vs pesimistic. \n\nWe need to tune this!!',
         'sel-line': 6L}),
                  u'generate_corr_mat': (loc('generator_corr_mat.py'),
        {'attrib-starts': [('generate_corr_mat|0|',
                            5)],
         'category': 'unimpl',
         'code-line': 'def generate_corr_mat(size):\r\n',
         'first-line': 0L,
         'notes': u'We need to store the correlation matrix!!!\n\nThis implementation is too simple and free. We should add options on how\nwe want to generate the corr matrix. For example:\n\n1. Corr matrix depending on distance in the skeleton graph (see inexact bundle\ngraph generator for an example of this)\n\n2. We could give a list of activities so we get a block correlation matrix ',
         'sel-line': 5L}),
                  u'generate_cost_times': (loc('generator_crash.py'),
        {'attrib-starts': [('generate_cost_times|0|',
                            30)],
         'category': 'test',
         'code-line': 'def generate_cost_times(no_of_nodes, out_location, cr'\
                      'ashcost_file_name):\r\n',
         'first-line': 5L,
         'notes': u'Need to check what values make sense here for our problem. We should send\nthe cost times to the penalty values creation function so we penalize with a\nfraction of the cost',
         'sel-line': 32L}),
                  'generate_cost_times[1]': (loc('generator_crash.py'),
        {'attrib-starts': [('generate_cost_times|0|',
                            30)],
         'category': 'user-ltpogysy',
         'code-line': '   crash_cost = deque(uniform(100, 200, no_of_nodes))'\
                      '\r\n',
         'first-line': 20L,
         'notes': u'Here is where we set the range of costs. We could improve this if we correlate \nthe costs with strength of crashingh. TO DO!',
         'sel-line': 44L}),
                  'generate_crash_times': (loc('generator_crash.py'),
        {'attrib-starts': [('generate_crash_times|0|',
                            4)],
         'category': 'unimpl',
         'code-line': 'def generate_crash_times(no_of_nodes, out_location, c'\
                      'rashtime_file_name):\r\n',
         'first-line': 0L,
         'notes': u'1. Needs to insert crash times in database\n\n2. The crash times should not be too big. If so,\n then we could do a buch of activities in no time!',
         'sel-line': 1L}),
                  'generate_crash_times[1]': (loc('generator_crash.py'),
        {'attrib-starts': [('generate_crash_times|0|',
                            4)],
         'category': 'user-ltpogysy',
         'code-line': '   crash_time = deque(uniform(0.1, 0.5, no_of_nodes))'\
                      '\r\n',
         'first-line': 3L,
         'notes': u'Here we control the strength of crash (i.e. how effective crashes are)',
         'sel-line': 16L}),
                  'generate_scenarios': (loc('generator_scenario.py'),
        {'attrib-starts': [('generate_scenarios|0|',
                            6)],
         'category': 'unimpl',
         'code-line': 'def generate_scenarios(num_activities, num_scenarios,'\
                      ' correlation_matrix, distribution_dic, out_location, '\
                      'out_name):\r\n',
         'first-line': 0L,
         'notes': u"This code needs to generate dynamic scenarion on-call.\nI'll add this in a separate file and use it later.",
         'sel-line': 6L}),
                  'get_pareto_fronts_probabilities': (loc('SBB.py'),
        {'attrib-starts': [('get_pareto_fronts_probabilities|0|',
                            716)],
         'category': 'user-xaqw261n',
         'code-line': '   ...\r\n',
         'first-line': 664L,
         'notes': u'',
         'sel-line': 763L}),
                  'get_std_bootstrap': (loc('SBB.py'),
        {'attrib-starts': [('get_std_bootstrap|0|',
                            390)],
         'category': 'doc',
         'code-line': '   """\r\n',
         'first-line': 633L,
         'notes': u'',
         'sel-line': 552L}),
                  'initialize_common_attributes[1]': (loc('SBB.py'),
        {'attrib-starts': [('initialize_common_attributes|0|',
                            25)],
         'category': 'unimpl',
         'code-line': '   ...\r\n',
         'first-line': 3L,
         'notes': u'',
         'sel-line': 32L}),
                  'multisolve_scenarios[1]': (loc('SBB.py'),
        {'attrib-starts': [('multisolve_scenarios|0|',
                            501)],
         'category': 'doc',
         'code-line': '   ...\r\n',
         'first-line': 406L,
         'notes': u'',
         'sel-line': 504L}),
                  'optimize': (loc('optimize.py'),
                               {'attrib-starts': [('optimize|0|',
        9)],
                                'category': 'unimpl',
                                'code-line': '    # try:\r\n',
                                'first-line': 99L,
                                'notes': u'Sorround this by a try catch statement',
                                'sel-line': 161L}),
                  u'optimize.py:207': (loc('optimize.py'),
                                       {'attrib-starts': [],
        'category': 'test',
        'code-line': '    pool = mp.Pool(int(processes/2))\r\n',
        'first-line': 193L,
        'notes': u'Place to tune number of process parameter',
        'sel-line': 206L}),
                  'optimize[2]': (loc('optimize.py'),
                                  {'attrib-starts': [('optimize|0|',
        9)],
                                   'category': 'unimpl',
                                   'code-line': '    # Push results into DB'\
        '\r\n',
                                   'first-line': 134L,
                                   'notes': u'Results are incomplete. We need the ctual obj values and optimal solutions',
                                   'sel-line': 179L}),
                  'optimize_subproblem': (loc('generator_subproblem.py'),
        {'attrib-starts': [('optimize_subproblem|0|',
                            5)],
         'category': '',
         'code-line': '    model.optimize()\r\n',
         'first-line': 108L,
         'notes': u'What do we do with infeasible problems? We need to add some way to deal with this. \nMost probably, the whole calculation should be discarded',
         'sel-line': 147L}),
                  'partition_record_set': (loc('SBB.py'),
        {'attrib-starts': [('partition_record_set|0|',
                            217)],
         'category': 'doc',
         'code-line': '   ...\r\n',
         'first-line': 158L,
         'notes': u'',
         'sel-line': 221L}),
                  'partition_record_set[1]': (loc('SBB.py'),
        {'attrib-starts': [('partition_record_set|0|',
                            217)],
         'category': 'user-xaqw261n',
         'code-line': "         subproblem1['KG_E'] = np.inf\r\n",
         'first-line': 201L,
         'notes': u'',
         'sel-line': 255L}),
                  'partition_record_set[2]': (loc('SBB.py'),
        {'attrib-starts': [('partition_record_set|0|',
                            217)],
         'category': 'user-xaqw261n',
         'code-line': "         subproblem2['KG_E'] = np.inf\r\n",
         'first-line': 216L,
         'notes': u'',
         'sel-line': 276L}),
                  'partition_record_set[3]': (loc('SBB.py'),
        {'attrib-starts': [('partition_record_set|0|',
                            217)],
         'category': 'user-xaqw261n',
         'code-line': '         estimate_bounds(attributes_dict, subproblem1'\
                      ',\r\n',
         'first-line': 246L,
         'notes': u'',
         'sel-line': 339L}),
                  'rank_by_distance': (loc('SBB.py'),
                                       {'attrib-starts': [('rank_by_distance'\
        '|0|',
        731)],
        'category': 'doc',
        'code-line': '   ...\r\n',
        'first-line': 588L,
        'notes': u'',
        'sel-line': 736L}),
                  'uncrashed_project_time': (loc('uncrashed_bounds.py'),
        {'attrib-starts': [('uncrashed_project_time|0|',
                            2)],
         'category': '',
         'code-line': 'def uncrashed_project_time(project_network, scenario,'\
                      ' outlocation):\r\n',
         'first-line': 0L,
         'notes': u'Remove multiple debug print statements!',
         'sel-line': 2L}),
                  'update_mu_S': (loc('KG.py'),
                                  {'attrib-starts': [('update_mu_S|0|',
        44)],
                                   'category': 'doc',
                                   'code-line': '   """ Get updated mu and S'\
        ' after taking a sample y\r\n',
                                   'first-line': 21L,
                                   'notes': u'',
                                   'sel-line': 46L}),
                  'work_on_subproblems': (loc('SBB.py'),
        {'attrib-starts': [('work_on_subproblems|0|',
                            359)],
         'category': 'unimpl',
         'code-line': "         min_obj_val.append(subproblem['E'])\r\n",
         'first-line': 305L,
         'notes': u'We need to update Z_E and Z_std here too',
         'sel-line': 405L}),
                  'work_on_subproblems[1]': (loc('SBB.py'),
        {'attrib-starts': [('work_on_subproblems|0|',
                            359)],
         'category': 'doc',
         'code-line': '   ...\r\n',
         'first-line': 257L,
         'notes': u'',
         'sel-line': 362L}),
                  'work_on_subproblems[2]': (loc('SBB.py'),
        {'attrib-starts': [('work_on_subproblems|0|',
                            359)],
         'category': 'unimpl',
         'code-line': "   total_scenarios = attributes_dict['scenarios'][sce"\
                      "nario_start_index:scenario_end_index]\r\n",
         'first-line': 263L,
         'notes': u'Place to add the dynamic scenario insertion!',
         'sel-line': 368L}),
                  'work_on_subproblems[3]': (loc('SBB.py'),
        {'attrib-starts': [('work_on_subproblems|0|',
                            359)],
         'category': 'user-xaqw261n',
         'code-line': "   if attributes_dict['method']==\"KG\":\r\n",
         'first-line': 284L,
         'notes': u'',
         'sel-line': 381L})}
edit.multi-select-popup-size = (245,
                                118)
gui.perspectives = (1,
                    {})
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'sRbZhYtRg99Cu3BGALBwWM0HgU'\
        'yQB03q',
        'size-state': '',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.4367816091954023,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [],
                                 'selected-nodes': [(0,)],
                                 'top-node': (0,)}},
        'tree-style': 'deep'}}),
                              ('batch-search',
                               'tall',
                               0,
                               {'fScope': {'fFileSetName': 'All Source Files',
        'fLocation': None,
        'fRecursive': True,
        'fType': 'project-files'},
                                'fSearchSpec': {'fEndPos': None,
        'fIncludeLinenos': True,
        'fInterpretBackslashes': False,
        'fMatchCase': False,
        'fOmitBinary': True,
        'fRegexFlags': 42,
        'fReplaceText': '',
        'fReverse': True,
        'fSearchText': u'',
        'fStartPos': 0,
        'fStyle': 'text',
        'fWholeWords': False,
        'fWrap': True},
                                'fUIOptions': {'fAutoBackground': True,
        'fFilePrefix': 'short-file',
        'fFindAfterReplace': True,
        'fInSelection': False,
        'fIncremental': True,
        'fReplaceOnDisk': False,
        'fShowFirstMatch': False,
        'fShowLineno': True,
        'fShowReplaceWidgets': False},
                                'replace-entry-expanded': False,
                                'search-entry-expanded': False}),
                              ('uses',
                               'tall',
                               0,
                               {}),
                              ('refactoring',
                               'tall',
                               0,
                               {}),
                              ('debug-data',
                               'tall',
                               0,
                               {}),
                              ('debug-stack',
                               'tall',
                               0,
                               {'codeline-mode': 'below'}),
                              ('os-command',
                               'tall',
                               1,
                               {'last-percent': 0.8,
                                'toolbox-percent': 1.0,
                                'toolbox-tree-sel': 'cmd-n5KmNQsKYK6EJLrW'}),
                              ('python-shell',
                               'tall',
                               1,
                               {'active-range': (None,
        -1,
        -1),
                                'attrib-starts': [],
                                'code-line': '',
                                'first-line': 0L,
                                'folded-linenos': [],
                                'history': {None: ['import random\n',
        'random()\n',
        'random.rn\n',
        'random.randint()\n',
        'random.randint(0,1000)\n',
        'random.randint(0,10000)\n',
        'int(0)\n']},
                                'launch-id': None,
                                'sel-line': 3L,
                                'sel-line-start': 181L,
                                'selection_end': 181L,
                                'selection_start': 181L,
                                'zoom': 0L}),
                              ('debug-probe',
                               'tall',
                               1,
                               {'active-range': (None,
        -1,
        -1),
                                'attrib-starts': [],
                                'code-line': '',
                                'first-line': 0L,
                                'folded-linenos': [],
                                'history': {u'file:C:/Users/Ricardo/Dropbox/Current Work/Insight/Work/final/optimize.py': ['a'\
        'ttributes_dict[KG_mu]\n',
        "attributes_dict['KG_mu']\n",
        "list(attributes_dict['KG_mu'].keys())\n",
        "sorted(list(attributes_dict['KG_mu'].keys()))\n",
        "sorted(list(attributes_dict['KG_mu'].keys())).index(2)\n",
        "sorted(list(attributes_dict['KG_mu'].keys())).index(3)\n",
        "sorted(list(attributes_dict['KG_mu'].keys()))[L[0]]\n",
        "sorted(list(attributes_dict['KG_mu'].keys()))[0]\n",
        "sorted(list(attributes_dict['KG_mu'].keys()))[1]\n",
        'L[0]\n',
        'i\n',
        'subproblem\n',
        'assigned_scenarios_dict\n',
        'type(assigned_scenarios_dict[0])\n',
        'assigned_scenarios_dict[1]\n',
        'assigned_scenarios_dict[0]\n',
        'total_scenarios\n',
        'total_scenarios[2]\n',
        'len(total_scenarios)\n']},
                                'launch-id': None,
                                'sel-line': 0L,
                                'sel-line-start': 0L,
                                'selection_end': 0L,
                                'selection_start': 0L,
                                'zoom': 0L}),
                              ('debug-io',
                               'tall',
                               1,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [0],
        'notebook_display': 'tabs only',
        'notebook_percent': 0.23336968375136313,
        'override_title': None,
        'pagelist': [('debug-breakpoints',
                      'wide',
                      0,
                      {'tree-state': []}),
                     ('debug-watch',
                      'wide',
                      0,
                      {'node-states': [],
                       'tree-state': {'expanded-nodes': [],
                                      'selected-nodes': [],
                                      'top-node': (0,)}}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('bookmarks',
                      'wide',
                      0,
                      {'filter-text': ''}),
                     ('messages',
                      'wide',
                      1,
                      {'current-domain': 0}),
                     ('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': 'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 42,
                                       'fReplaceText': '',
                                       'fReverse': False,
                                       'fSearchText': u'b2',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False}})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('KG.py'),
        {'attrib-starts': [('KG_iteration|0|',
                            180)],
         'code-line': 'def KG_iteration(mu, S, lambda_, x):\r\n',
         'first-line': 159L,
         'folded-linenos': [],
         'sel-line': 180L,
         'sel-line-start': 3779L,
         'selection_end': 3779L,
         'selection_start': 3779L,
         'zoom': 0L},
        1592481591.274],
        [loc('SBB.py'),
         {'attrib-starts': [],
          'code-line': 'from KG import update_mu_S\r\n',
          'first-line': 12L,
          'folded-linenos': [],
          'sel-line': 8L,
          'sel-line-start': 194L,
          'selection_end': 194L,
          'selection_start': 194L,
          'zoom': 0L},
         1592481601.796],
        [loc('SBB.py'),
         {'attrib-starts': [('work_on_subproblems|0|',
                             359)],
          'code-line': 'def work_on_subproblems(attributes_dict, partition_l'\
                       'ist, scenario_start_index, scenario_end_index, level'\
                       '):\r\n',
          'first-line': 363L,
          'folded-linenos': [],
          'sel-line': 359L,
          'sel-line-start': 13730L,
          'selection_end': 13753L,
          'selection_start': 13734L,
          'zoom': 0L},
         1592481610.71],
        [loc('optimize.py'),
         {'attrib-starts': [],
          'code-line': 'import SBB\r\n',
          'first-line': 0L,
          'folded-linenos': [],
          'sel-line': 4L,
          'sel-line-start': 59L,
          'selection_end': 59L,
          'selection_start': 59L,
          'zoom': 0L},
         1592481613.26],
        [loc('SBB.py'),
         {'attrib-starts': [('work_on_subproblems|0|',
                             359)],
          'code-line': 'def work_on_subproblems(attributes_dict, partition_l'\
                       'ist, scenario_start_index, scenario_end_index, level'\
                       '):\r\n',
          'first-line': 363L,
          'folded-linenos': [],
          'sel-line': 359L,
          'sel-line-start': 13730L,
          'selection_end': 13753L,
          'selection_start': 13734L,
          'zoom': 0L},
         1592481631.89],
        [loc('SBB.py'),
         {'attrib-starts': [('partition_record_set|0|',
                             217)],
          'code-line': '         #if True:\r\n',
          'first-line': 281L,
          'folded-linenos': [],
          'sel-line': 296L,
          'sel-line-start': 11179L,
          'selection_end': 11189L,
          'selection_start': 11189L,
          'zoom': 0L},
         1592481645.9],
        [loc('SBB.py'),
         {'attrib-starts': [('estimate_bounds|0|',
                             416)],
          'code-line': "   if attributes_dict['method'] == 'KG':\r\n",
          'first-line': 433L,
          'folded-linenos': [],
          'sel-line': 458L,
          'sel-line-start': 17763L,
          'selection_end': 17803L,
          'selection_start': 17803L,
          'zoom': 0L},
         1592481660.352],
        [loc('SBB.py'),
         {'attrib-starts': [('partition_record_set|0|',
                             217)],
          'code-line': "            KG_mu = attributes_dict['KG_mu']\r\n",
          'first-line': 290L,
          'folded-linenos': [],
          'sel-line': 296L,
          'sel-line-start': 11179L,
          'selection_end': 11179L,
          'selection_start': 11179L,
          'zoom': 0L},
         1592481686.07],
        [loc('SBB.py'),
         {'attrib-starts': [('work_on_subproblems|0|',
                             358)],
          'code-line': 'def work_on_subproblems(attributes_dict, partition_l'\
                       'ist, scenario_start_index, scenario_end_index, level'\
                       '):\r\n',
          'first-line': 362L,
          'folded-linenos': [],
          'sel-line': 358L,
          'sel-line-start': 13710L,
          'selection_end': 13733L,
          'selection_start': 13714L,
          'zoom': 0L},
         1592481696.09],
        [loc('SBB.py'),
         {'attrib-starts': [('assign_scenarios_KG|0|',
                             652)],
          'code-line': "   subproblem_name = sorted(list(attributes_dict['KG"\
                       "_mu'].keys()))[L[0]]\r\n",
          'first-line': 648L,
          'folded-linenos': [],
          'sel-line': 675L,
          'sel-line-start': 26175L,
          'selection_end': 26193L,
          'selection_start': 26178L,
          'zoom': 0L},
         1592482972.141],
        [loc('SBB.py'),
         {'attrib-starts': [('assign_scenarios_KG|0|',
                             652)],
          'code-line': '   assigned_scenarios_dict = {}\r\n',
          'first-line': 654L,
          'folded-linenos': [],
          'sel-line': 665L,
          'sel-line-start': 25784L,
          'selection_end': 25784L,
          'selection_start': 25784L,
          'zoom': 0L},
         1592483608.708],
        [loc('optimize.py'),
         {'attrib-starts': [],
          'code-line': '        seed1 = random.randint(0,10000)\r\n',
          'first-line': 201L,
          'folded-linenos': [],
          'sel-line': 227L,
          'sel-line-start': 8091L,
          'selection_end': 8181L,
          'selection_start': 8091L,
          'zoom': 0L},
         1592483769.54],
        [loc('KG.py'),
         {'attrib-starts': [('KG_iteration|0|',
                             180)],
          'code-line': '   return x-1, v\r\n',
          'first-line': 201L,
          'folded-linenos': [],
          'sel-line': 226L,
          'sel-line-start': 4933L,
          'selection_end': 4949L,
          'selection_start': 4949L,
          'zoom': 0L},
         1592483862.188],
        [loc('optimize.py'),
         {'attrib-starts': [('optimize|0|',
                             9)],
          'code-line': '    num_scenarios = 10000 +  4*num_scenerios_per_est'\
                       'imation\r\n',
          'first-line': 208L,
          'folded-linenos': [],
          'sel-line': 64L,
          'sel-line-start': 1720L,
          'selection_end': 1745L,
          'selection_start': 1745L,
          'zoom': 0L},
         1592527211.588],
        [loc('SBB.py'),
         {'attrib-starts': [('assign_scenarios_KG|0|',
                             652)],
          'code-line': '   assigned_scenarios_dict = {}\r\n',
          'first-line': 648L,
          'folded-linenos': [],
          'sel-line': 665L,
          'sel-line-start': 25784L,
          'selection_end': 25784L,
          'selection_start': 25784L,
          'zoom': 0L},
         1592527230.951],
        [loc('SBB.py'),
         {'attrib-starts': [('update_row_col|0|',
                             819)],
          'code-line': '   #DEBUG\r\n',
          'first-line': 859L,
          'folded-linenos': [],
          'sel-line': 877L,
          'sel-line-start': 32740L,
          'selection_end': 33068L,
          'selection_start': 32744L,
          'zoom': 0L},
         1592527266.403],
        [loc('optimize.py'),
         {'attrib-starts': [('optimize|0|',
                             9)],
          'code-line': '                                                    '\
                       ' scenarios_file_name,\r\n',
          'first-line': 205L,
          'folded-linenos': [],
          'sel-line': 77L,
          'sel-line-start': 2335L,
          'selection_end': 2408L,
          'selection_start': 2408L,
          'zoom': 0L},
         1592656752.859],
        [loc('SBB.py'),
         {'attrib-starts': [('update_row_col|0|',
                             819)],
          'code-line': '   #DEBUG\r\n',
          'first-line': 859L,
          'folded-linenos': [],
          'sel-line': 877L,
          'sel-line-start': 32740L,
          'selection_end': 33068L,
          'selection_start': 32744L,
          'zoom': 0L},
         1592656753.828],
        [loc('optimize.py'),
         {'attrib-starts': [('optimize|0|',
                             9)],
          'code-line': '                                                    '\
                       ' scenarios_file_name,\r\n',
          'first-line': 205L,
          'folded-linenos': [],
          'sel-line': 77L,
          'sel-line-start': 2335L,
          'selection_end': 2408L,
          'selection_start': 2408L,
          'zoom': 0L},
         1592656754.488],
        [loc('KG.py'),
         {'attrib-starts': [('KG_iteration|0|',
                             180)],
          'code-line': '   return x-1, v\r\n',
          'first-line': 201L,
          'folded-linenos': [],
          'sel-line': 226L,
          'sel-line-start': 4933L,
          'selection_end': 4949L,
          'selection_start': 4949L,
          'zoom': 0L},
         1592656754.981]],
        20),
        'current-loc': loc('optimize.py'),
        'editor-state-list': [(loc('optimize.py'),
                               {'attrib-starts': [],
                                'code-line': 'import sqlite3\r\n',
                                'first-line': 0L,
                                'folded-linenos': [],
                                'sel-line': 2L,
                                'sel-line-start': 28L,
                                'selection_end': 42L,
                                'selection_start': 42L,
                                'zoom': 0L})],
        'has-focus': True,
        'locked': False},
        [loc('optimize.py')]),
                               'open_files': [u'optimize.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.5187393526405452},
        'splits': 1,
        'tab_location': 'top',
        'traversal_pos': ((0,
                           0),
                          1592482327.072),
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5200868621064061,
                                    1: 0.5,
                                    2: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'traversal_pos': ((0,
                                    0),
                                   1592656761.364),
                 'user_data': {}},
        'window-alloc': (0,
                         0,
                         1920,
                         1050)}]}
guimgr.recent-documents = [loc('optimize.py')]
guimgr.visual-state = {loc('../../../../../Anaconda3/envs/insight-prj/Lib/importlib/_bootstrap.py'): {'a'\
        'ttrib-starts': [('_find_and_load|0|',
                          965)],
        'code-line': '            return _find_and_load_unlocked(name, impor'\
                     't_)\n',
        'first-line': 922L,
        'folded-linenos': [],
        'sel-line': 970L,
        'sel-line-start': 31651L,
        'selection_end': 31651L,
        'selection_start': 31651L,
        'zoom': 0L},
                       loc('../../../../../Anaconda3/envs/insight-prj/Lib/site-packages/numpy/core/_methods.py'): {'a'\
        'ttrib-starts': [('_mean|0|',
                          57)],
        'code-line': '    ret = umr_sum(arr, axis, dtype, out, keepdims)\n',
        'first-line': 34L,
        'folded-linenos': [],
        'sel-line': 74L,
        'sel-line-start': 2368L,
        'selection_end': 2368L,
        'selection_start': 2368L,
        'zoom': 0L},
                       loc('../../../../../Anaconda3/envs/insight-prj/Lib/site-packages/numpy/core/fromnumeric.py'): {'a'\
        'ttrib-starts': [('_wrapit|0|',
                          40)],
        'code-line': '    result = getattr(asarray(obj), method)(*args, **kw'\
                     'ds)\n',
        'first-line': 40L,
        'folded-linenos': [],
        'sel-line': 45L,
        'sel-line-start': 1315L,
        'selection_end': 1315L,
        'selection_start': 1315L,
        'zoom': 0L},
                       loc('../../../../../Anaconda3/envs/insight-prj/Lib/site-packages/numpy/linalg/linalg.py'): {'a'\
        'ttrib-starts': [('_assertFinite|0|',
                          214)],
        'code-line': '        if not (isfinite(a).all()):\n',
        'first-line': 197L,
        'folded-linenos': [],
        'sel-line': 216L,
        'sel-line-start': 6461L,
        'selection_end': 6461L,
        'selection_start': 6461L,
        'zoom': 0L},
                       loc('../../../../../Anaconda3/envs/insight-prj/Lib/site-packages/pandas/core/indexes/base.py'): {'a'\
        'ttrib-starts': [('Index|0|',
                          176),
                         ('Index|0|.drop|0|',
                          4991)],
        'code-line': '                raise KeyError(f"{labels[mask]} not fo'\
                     'und in axis")\n',
        'first-line': 4978L,
        'folded-linenos': [],
        'sel-line': 5016L,
        'sel-line-start': 164092L,
        'selection_end': 164092L,
        'selection_start': 164092L,
        'zoom': 0L},
                       loc('../../../../../AppData/Local/Wing Pro 7/pi-cache/3.6/c/Users/Ricardo/Anaconda3/envs/insight-prj/Lib/site-packages/pygmo/core.pi'): {'a'\
        'ttrib-starts': [('fast_non_dominated_sorting|0|',
                          2195)],
        'code-line': '      * *ndf* (``list`` of 1D NumPy int array): the no'\
                     'n dominated fronts\n',
        'first-line': 2186L,
        'folded-linenos': [],
        'sel-line': 2210L,
        'sel-line-start': 88937L,
        'selection_end': 89009L,
        'selection_start': 88989L,
        'zoom': 0L},
                       loc('../../../Anaconda3/envs/insight-prj/Lib/abc.py'): {'a'\
        'ttrib-starts': [('ABCMeta|0|',
                          108),
                         ('ABCMeta|0|.__instancecheck__|0|',
                          179)],
        'code-line': '        subclass = instance.__class__\n',
        'first-line': 153L,
        'folded-linenos': [],
        'sel-line': 182L,
        'sel-line-start': 6144L,
        'selection_end': 6144L,
        'selection_start': 6144L,
        'zoom': 0L},
                       loc('../../../Anaconda3/envs/insight-prj/Lib/multiprocessing/pool.py'): {'a'\
        'ttrib-starts': [('ApplyResult|0|',
                          616),
                         ('ApplyResult|0|.get|0|',
                          -1)],
        'code-line': '            raise self._value\n',
        'first-line': 605L,
        'folded-linenos': [],
        'sel-line': 643L,
        'sel-line-start': 21138L,
        'selection_end': 21138L,
        'selection_start': 21138L,
        'zoom': 0L},
                       loc('../../../Anaconda3/envs/insight-prj/Lib/site-packages/networkx/classes/digraph.py'): {'a'\
        'ttrib-starts': [('DiGraph|0|',
                          22),
                         ('DiGraph|0|.successors|0|',
                          783)],
        'code-line': '\n',
        'first-line': 762L,
        'folded-linenos': [],
        'sel-line': 793L,
        'sel-line-start': 28851L,
        'selection_end': 28851L,
        'selection_start': 28851L,
        'zoom': 0L},
                       loc('../../../Anaconda3/envs/insight-prj/Lib/site-packages/pygmo/__init__.py'): {'a'\
        'ttrib-starts': [('_population_init|0|',
                          243)],
        'code-line': '        prob = problem(prob)\n',
        'first-line': 239L,
        'folded-linenos': [],
        'sel-line': 281L,
        'sel-line-start': 11754L,
        'selection_end': 11754L,
        'selection_start': 11754L,
        'zoom': 0L},
                       loc('../../../Anaconda3/envs/insight-prj/Lib/site-packages/scipy/stats/_continuous_distns.py'): {'a'\
        'ttrib-starts': [('norm_gen|0|',
                          210)],
        'code-line': 'class norm_gen(rv_continuous):\n',
        'first-line': 190L,
        'folded-linenos': [],
        'sel-line': 210L,
        'sel-line-start': 5325L,
        'selection_end': 5339L,
        'selection_start': 5331L,
        'zoom': 0L},
                       loc('DatabaseSetup.py'): {'attrib-starts': [],
        'code-line': 'import sqlite3\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('GenerateInfrastructure.py'): {'attrib-starts': [],
        'code-line': 'import random\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 214L,
        'selection_end': 227L,
        'selection_start': 227L,
        'zoom': 0L},
                       loc('KG.py'): {'attrib-starts': [('KG_iteration|0|',
        180)],
                                      'code-line': '   return x-1, v\r\n',
                                      'first-line': 201L,
                                      'folded-linenos': [],
                                      'sel-line': 226L,
                                      'sel-line-start': 4933L,
                                      'selection_end': 4949L,
                                      'selection_start': 4949L,
                                      'zoom': 0L},
                       loc('ML.png'): {'attrib-starts': [],
                                       'code-line': '\xc2\x89PNG\r\n',
                                       'first-line': 0L,
                                       'folded-linenos': [],
                                       'sel-line': 0L,
                                       'sel-line-start': 0L,
                                       'selection_end': 0L,
                                       'selection_start': 0L,
                                       'zoom': 0L},
                       loc('Not Used/project_network_generator.py'): {'attri'\
        'b-starts': [('create_connected_graph|0|',
                      8)],
        'code-line': '    ----------\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 12L,
        'sel-line-start': 356L,
        'selection_end': 370L,
        'selection_start': 370L,
        'zoom': 0L},
                       loc('SBB.py'): {'attrib-starts': [('update_row_col|0|',
        819)],
                                       'code-line': '   #DEBUG\r\n',
                                       'first-line': 859L,
                                       'folded-linenos': [],
                                       'sel-line': 877L,
                                       'sel-line-start': 32740L,
                                       'selection_end': 33068L,
                                       'selection_start': 32744L,
                                       'zoom': 0L},
                       loc('Test/KG-test.py'): {'attrib-starts': [],
        'code-line': '   print(KG_Alg(mu, S, lambda_))\r\n',
        'first-line': 3L,
        'folded-linenos': [],
        'sel-line': 27L,
        'sel-line-start': 798L,
        'selection_end': 830L,
        'selection_start': 830L,
        'zoom': 0L},
                       loc('Test/test.py'): {'attrib-starts': [],
        'code-line': 'from generator_network import create_network\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 1L,
        'sel-line-start': 16L,
        'selection_end': 38L,
        'selection_start': 38L,
        'zoom': 0L},
                       loc('TestClass.py'): {'attrib-starts': [],
        'code-line': 'import numpy as np\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('TestingPenalty.py'): {'attrib-starts': [],
        'code-line': 'import gurobipy as gp\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('Testngscenarios.py'): {'attrib-starts': [],
        'code-line': 'import csv\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('__init__.py'): {'attrib-starts': [],
        'code-line': '\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 0L,
        'selection_start': 0L,
        'zoom': 0L},
                       loc('branch_bound_impl.py'): {'attrib-starts': [('bra'\
        'nch_bound_algorithm|0|',
        23)],
        'code-line': 'def branch_bound_algorithm(pool,project_network,scenar'\
                     'ios,crashtime,crashcost,t_init,t_final,outlocation):\r'\
                     '\n',
        'first-line': 12L,
        'folded-linenos': [],
        'sel-line': 23L,
        'sel-line-start': 427L,
        'selection_end': 453L,
        'selection_start': 431L,
        'zoom': 0L},
                       loc('branch_bound_impl_new.py'): {'attrib-starts': [],
        'code-line': 'from subproblem import solve_subproblem\r\n',
        'first-line': 216L,
        'folded-linenos': [],
        'sel-line': 7L,
        'sel-line-start': 148L,
        'selection_end': 187L,
        'selection_start': 171L,
        'zoom': 0L},
                       loc('branch_bound_method.py'): {'attrib-starts': [('b'\
        'ranch_bound_algorithm|0|',
        108)],
        'code-line': "                                                      "\
                     "                                                    se"\
                     "=round(subproblem['E'], 3),\r\n",
        'first-line': 0L,
        'folded-linenos': [29L],
        'sel-line': 180L,
        'sel-line-start': 6185L,
        'selection_end': 6315L,
        'selection_start': 6300L,
        'zoom': 0L},
                       loc('config.py'): {'attrib-starts': [('initialize|0|',
        1)],
        'code-line': '   KG_leaf_counter = int(0)',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 3L,
        'sel-line-start': 48L,
        'selection_end': 75L,
        'selection_start': 75L,
        'zoom': 0L},
                       loc('create_final_optimization_problem.py'): {'attrib'\
        '-starts': [('create_final_optimization_problem|0|',
                     5)],
        'code-line': '                                      t_init,\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 9L,
        'sel-line-start': 359L,
        'selection_end': 404L,
        'selection_start': 404L,
        'zoom': 0L},
                       loc('database_setup.py'): {'attrib-starts': [],
        'code-line': '          METHOD TEXT            NOT NULL,\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 7L,
        'sel-line-start': 231L,
        'selection_end': 273L,
        'selection_start': 273L,
        'zoom': 0L},
                       loc('generate_beta_distribution_for_activities.py'): {'a'\
        'ttrib-starts': [('generate_betas|0|',
                          6)],
        'code-line': '        # Calculate pert beta distribution using alpha'\
                     ' and bet\r\n',
        'first-line': 54L,
        'folded-linenos': [],
        'sel-line': 75L,
        'sel-line-start': 2471L,
        'selection_end': 2533L,
        'selection_start': 2533L,
        'zoom': 0L},
                       loc('generate_correlation_matrix.py'): {'attrib-start'\
        's': [('generate_corr_mat|0|',
               5)],
        'code-line': 'def generate_corr_mat(size):\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 81L,
        'selection_end': 95L,
        'selection_start': 95L,
        'zoom': 0L},
                       loc('generate_scenarios.py'): {'attrib-starts': [('ge'\
        'nerate_scenarios|0|',
        6)],
        'code-line': '            k = np.array(activity_beta_distribution_li'\
                     'st[i + 1].ppf(B2[:, i]))  #.astype(int)\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 14L,
        'sel-line-start': 507L,
        'selection_end': 563L,
        'selection_start': 532L,
        'zoom': 0L},
                       loc('generator_corr_mat.py'): {'attrib-starts': [],
        'code-line': 'from nearest_correlation import nearcorr\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 0L,
        'sel-line-start': 0L,
        'selection_end': 40L,
        'selection_start': 32L,
        'zoom': 0L},
                       loc('generator_crash.py'): {'attrib-starts': [('gener'\
        'ate_crash_cost|0|',
        30)],
        'code-line': 'def generate_crash_cost(no_of_nodes, out_location, cra'\
                     'sh_cost_file_name):\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 30L,
        'sel-line-start': 711L,
        'selection_end': 734L,
        'selection_start': 715L,
        'zoom': 0L},
                       loc('generator_distribution.py'): {'attrib-starts': [('g'\
        'enerate_betas|0|',
        6)],
        'code-line': 'def generate_betas(project_network, geom_prob, out_loc'\
                     'ation):\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 6L,
        'sel-line-start': 135L,
        'selection_end': 153L,
        'selection_start': 139L,
        'zoom': 0L},
                       loc('generator_infrastructure.py'): {'attrib-starts': [('g'\
        'enerate_infrastructure|0|',
        8)],
        'code-line': 'def generate_infrastructure(no_of_nodes,\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 8L,
        'sel-line-start': 357L,
        'selection_end': 373L,
        'selection_start': 370L,
        'zoom': 1L},
                       loc('generator_network.py'): {'attrib-starts': [('gen'\
        'erate_network|0|',
        73)],
        'code-line': '   # Save generated graph with transmission nodes and '\
                     'arcs to file\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 118L,
        'sel-line-start': 3258L,
        'selection_end': 3324L,
        'selection_start': 3319L,
        'zoom': 1L},
                       loc('generator_penalty.py'): {'attrib-starts': [('gen'\
        'erate_penalty_vals_linear|0|',
        2)],
        'code-line': '   Parameters\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 4L,
        'sel-line-start': 112L,
        'selection_end': 140L,
        'selection_start': 115L,
        'zoom': 0L},
                       loc('generator_scenario.py'): {'attrib-starts': [('dy'\
        'namic_samples|0|',
        57)],
        'code-line': 'def dynamic_samples(num_activities, num_scenarios, cor'\
                     'relation_matrix, distribution_dict):\r\n',
        'first-line': 31L,
        'folded-linenos': [],
        'sel-line': 57L,
        'sel-line-start': 1643L,
        'selection_end': 1662L,
        'selection_start': 1647L,
        'zoom': 0L},
                       loc('generator_subproblem.py'): {'attrib-starts': [('o'\
        'ptimize_subproblem|0|',
        5)],
        'code-line': 'def optimize_subproblem(project_network,\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 152L,
        'selection_end': 175L,
        'selection_start': 156L,
        'zoom': 0L},
                       loc('nearest_correlation.py'): {'attrib-starts': [('n'\
        'earcorr|0|',
        17)],
        'code-line': 'def nearcorr(A, tol=[], flag=0, max_iterations=100, n_'\
                     'pos_eig=0,\r\n',
        'first-line': 12L,
        'folded-linenos': [],
        'sel-line': 17L,
        'sel-line-start': 394L,
        'selection_end': 406L,
        'selection_start': 398L,
        'zoom': 0L},
                       loc('network_generator.py'): {'attrib-starts': [('net'\
        'work_skeleton|0|',
        7)],
        'code-line': '   Parameters\r\n',
        'first-line': 4L,
        'folded-linenos': [],
        'sel-line': 10L,
        'sel-line-start': 239L,
        'selection_end': 252L,
        'selection_start': 252L,
        'zoom': 0L},
                       loc('network_skeleton_generator.py'): {'attrib-starts': [('n'\
        'etwork_skeleton|0|',
        4)],
        'code-line': 'def network_skeleton(num_nodes, num_layers):\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 4L,
        'sel-line-start': 50L,
        'selection_end': 70L,
        'selection_start': 54L,
        'zoom': 0L},
                       loc('optimize.py'): {'attrib-starts': [],
        'code-line': '    for i in range(2):\r\n',
        'first-line': 198L,
        'folded-linenos': [],
        'sel-line': 215L,
        'sel-line-start': 7654L,
        'selection_end': 7674L,
        'selection_start': 7674L,
        'zoom': 0L},
                       loc('pareto.py'): {'attrib-starts': [('flag_nondomina'\
        'ted|0|',
        370)],
        'code-line': '    for table in tables:\n',
        'first-line': 90L,
        'folded-linenos': [],
        'sel-line': 404L,
        'sel-line-start': 14061L,
        'selection_end': 14074L,
        'selection_start': 14069L,
        'zoom': 0L},
                       loc('penalty_function_helper.py'): {'attrib-starts': [],
        'code-line': 'import numpy as np\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 2L,
        'sel-line-start': 36L,
        'selection_end': 54L,
        'selection_start': 54L,
        'zoom': 0L},
                       loc('project_network_generator.py'): {'attrib-starts': [('c'\
        'reate_connected_graph|0|',
        8)],
        'code-line': 'def create_connected_graph(num_nodes, num_layers, out_'\
                     'location, out_name, density=0.4):\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 8L,
        'sel-line-start': 201L,
        'selection_end': 227L,
        'selection_start': 205L,
        'zoom': 0L},
                       loc('settings.py'): {'attrib-starts': [('init|0|',
        1)],
        'code-line': '   leaf_counter = int(0)',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 3L,
        'sel-line-start': 39L,
        'selection_end': 63L,
        'selection_start': 63L,
        'zoom': 0L},
                       loc('stochastic_branch_bound.py'): {'attrib-starts': [],
        'code-line': 'import sqlite3\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 1L,
        'sel-line-start': 13L,
        'selection_end': 27L,
        'selection_start': 27L,
        'zoom': 0L},
                       loc('subproblem.py'): {'attrib-starts': [('solve_subp'\
        'roblem|0|',
        5)],
        'code-line': 'def solve_subproblem(project_network,\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 5L,
        'sel-line-start': 152L,
        'selection_end': 172L,
        'selection_start': 156L,
        'zoom': 0L},
                       loc('uncrashed_bounds.py'): {'attrib-starts': [('uncr'\
        'ashed_project_time|0|',
        2)],
        'code-line': '    #print("ObjVal = {}".format(ObjVal))\r\n',
        'first-line': 22L,
        'folded-linenos': [],
        'sel-line': 57L,
        'sel-line-start': 1803L,
        'selection_end': 1889L,
        'selection_start': 1803L,
        'zoom': 0L},
                       loc('utilities.py'): {'attrib-starts': [('is_pos_def|'\
        '0|',
        3)],
        'code-line': '   return np.all(np.linalg.eigvals(x) > 0)\r\n',
        'first-line': 0L,
        'folded-linenos': [],
        'sel-line': 4L,
        'sel-line-start': 64L,
        'selection_end': 64L,
        'selection_start': 64L,
        'zoom': 0L}}
proj.build-cmd = {None: ('default',
                         None)}
proj.env-vars = {None: ('default',
                        [u''])}
proj.ptype = 'anaconda'
proj.pyexec = {None: ('activate',
                      'C:\\Users\\Ricardo\\Anaconda3\\condabin\\activate.bat'\
                      ' insight-prj')}
proj.pypath = {None: ('custom',
                      [u'$(WING:PROJECT_DIR)'])}
proj.vcs-system-config = ('prefs',
                          {'bzr': {'versioncontrol.bzr.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.bzr.executable': u'bzr'},
                           'cvs': {'versioncontrol.cvs.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.cvs.executable': u'cvs',
                                   'versioncontrol.cvs.extra-global-args': '-'\
        'z3'},
                           'git': {'versioncontrol.git.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.git.executable': u'git',
                                   'versioncontrol.git.use-porcelain': True},
                           'hg': {'versioncontrol.hg.active': 'active-if-pro'\
        'ject-dir',
                                  'versioncontrol.hg.dont-find-unregistered': True,
                                  'versioncontrol.hg.executable': u'hg',
                                  'versioncontrol.hg.extra-global-args': '--'\
        'encoding=utf8'},
                           'perforce': {'versioncontrol.perforce.active': 'n'\
        'ot-active',
        'versioncontrol.perforce.dont-find-unregistered': True,
        'versioncontrol.perforce.executable': u'p4',
        'versioncontrol.perforce.extra-global-args': ''},
                           'svn': {'versioncontrol.svn.active': 'active-if-p'\
        'roject-dir',
                                   'versioncontrol.svn.executable': u'svn',
                                   'versioncontrol.svn.extra-global-args': '',
                                   'versioncontrol.svn.svnadmin-executable': u'svnadmin'}})
search.search-history = [u'if True',
                         u"'KG'",
                         u"'",
                         u'if T',
                         u'nearcorr',
                         u"'KG_std'",
                         u"'KG_E'",
                         u"'KG_'",
                         u"KG'",
                         u'KG',
                         u'K',
                         u"'KG_mu'",
                         u"'KG_mu",
                         u'KG_mu',
                         u'b2',
                         u'Solution',
                         u'nan',
                         u'scen_est_num',
                         u'tion',
                         u'no_of_scenerios_for_each_estimation']
testing.stored-results = (1,
                          [],
                          {})
